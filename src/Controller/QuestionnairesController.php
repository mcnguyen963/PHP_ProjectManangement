<?php
declare(strict_types=1);

namespace App\Controller;

/**
 * Questionnaires Controller
 * @var \Cake\Utility\Security::decrypt
 * @property \App\Model\Table\QuestionnairesTable $Questionnaires
 */
class QuestionnairesController extends AppController
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Authentication->allowUnauthenticated(['add']);


    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        $query = $this->Questionnaires->find()
            ->contain(['Projects']);
        $search_input=$this->request->getQuery('question_data');
        $date_after=$this->request->getQuery('from_date');
        if ($search_input){
            $query->where(['business_name LIKE'=>'%'.$search_input.'%']);
        }
        if ($date_after){
            $query->where(['completion_time >='=>$date_after]);
        }
        $questionnaires = $this->paginate($query);
        $this->set(compact('questionnaires'));
    }

    /**
     * View method
     *
     * @param string|null $id Questionnaire id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $questionnaire = $this->Questionnaires->get($id, contain: ['Projects']);
        $this->set(compact('questionnaire'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add($id)
    {
        $questionnaire = $this->Questionnaires->newEmptyEntity();
        $project_id= \Cake\Utility\Security::decrypt($id, 'wt1U5MACWJFTXGenFoZoiLwQGrLgdbHA');

        // Check if a questionnaire already exists for the project_id
        if ($project_id) {
            $existingQuestionnaire = $this->Questionnaires->find()
                ->where(['project_id' => $project_id])
                ->first();

            // If a questionnaire already exists, redirect to the homepage
            if ($existingQuestionnaire) {
                return $this->redirect(['controller' => 'Pages', 'action' => 'home']);
            }
        }

        if ($this->request->is('post')) {
            $questionnaire = $this->Questionnaires->patchEntity($questionnaire, $this->request->getData());
            # change the project id to the decrypt one
            if ($project_id){
                $questionnaire->project_id=$project_id;
            }
            # automated update the compleition time
            $questionnaire->completion_time=date('yy-m-d H:i:s');

            if ($this->Questionnaires->save($questionnaire)) {
                $this->Flash->success(__('The questionnaire has been saved.'));

                return $this->redirect(['controller' => 'Pages', 'action' => 'home']);
            }
            $this->Flash->error(__
            ('The questionnaire could not be saved. Please, try again.'));
        }
        $projects = $this->Questionnaires->Projects->find('list', limit: 200)->all();
        $this->set(compact('questionnaire', 'projects'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Questionnaire id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $questionnaire = $this->Questionnaires->get($id, contain: []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $questionnaire = $this->Questionnaires->patchEntity($questionnaire, $this->request->getData());
            if ($this->Questionnaires->save($questionnaire)) {
                $this->Flash->success(__('The questionnaire has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The questionnaire could not be saved. Please, try again.'));
        }
        $projects = $this->Questionnaires->Projects->find('list', limit: 200)->all();
        $this->set(compact('questionnaire', 'projects'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Questionnaire id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $questionnaire = $this->Questionnaires->get($id);
        if ($this->Questionnaires->delete($questionnaire)) {
            $this->Flash->success(__('The questionnaire has been deleted.'));
        } else {
            $this->Flash->error(__('The questionnaire could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
